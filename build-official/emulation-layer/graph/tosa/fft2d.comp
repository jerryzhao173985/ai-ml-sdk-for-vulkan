/*
 * SPDX-FileCopyrightText: Copyright 2023-2025 Arm Limited and/or its affiliates <open-source-office@arm.com>
 * SPDX-License-Identifier: Apache-2.0
 */

#version 460
#extension GL_EXT_shader_explicit_arithmetic_types : enable
#extension GL_ARM_tensors : enable

// Maximum supported rank
#define RANK_MAX 6

#define NAN (0.0 / 0.0)
#define PI 3.141592653589793238462643383279502884197

// NAN Modes
#define NAN_MODE_PROPAGATE 1
#define NAN_MODE_IGNORE 2

// Types
#define TYPE_BOOL 0x6231   // "b1"
#define TYPE_INT8 0x6931   // "i1"
#define TYPE_INT16 0x6932  // "i2"
#define TYPE_INT32 0x6934  // "i4"
#define TYPE_INT64 0x6938  // "i8"
#define TYPE_HALF 0x6632   // "f2"
#define TYPE_FLOAT 0x6634  // "f4"
#define TYPE_DOUBLE 0x6638 // "f8"

#define IS_BOOL(t) (t == TYPE_BOOL)
#define IS_INTEGER(t) ((t >> 8) == 0x69)
#define IS_FLOAT(t) ((t >> 8) == 0x66)

#define applyBroadcast(shape, index, coords)                                                                           \
    {                                                                                                                  \
        for (int i = int(shape.length() - 1); i >= 0; i--) {                                                           \
            coords[i] = index[i];                                                                                      \
            if (shape[i] == 1) {                                                                                       \
                coords[i] = 0;                                                                                         \
            }                                                                                                          \
        }                                                                                                              \
    }

#define offsetToIndex(shape, offset, index)                                                                            \
    {                                                                                                                  \
        uint off = offset;                                                                                             \
        for (int i = int(index.length() - 1); i >= 0; i--) {                                                           \
            index[i] = off % shape[i];                                                                                 \
            off /= shape[i];                                                                                           \
        }                                                                                                              \
                                                                                                                       \
        if (off > 0) {                                                                                                 \
            return;                                                                                                    \
        }                                                                                                              \
    }

#define getShape(shape, tensorARM)                                                                                     \
    {                                                                                                                  \
        if (shape.length() == 6) {                                                                                     \
            shape[0] = tensorSizeARM(tensorARM, 0);                                                                    \
            shape[1] = tensorSizeARM(tensorARM, 1);                                                                    \
            shape[2] = tensorSizeARM(tensorARM, 2);                                                                    \
            shape[3] = tensorSizeARM(tensorARM, 3);                                                                    \
            shape[4] = tensorSizeARM(tensorARM, 4);                                                                    \
            shape[5] = tensorSizeARM(tensorARM, 5);                                                                    \
        } else if (shape.length() == 5) {                                                                              \
            shape[0] = tensorSizeARM(tensorARM, 0);                                                                    \
            shape[1] = tensorSizeARM(tensorARM, 1);                                                                    \
            shape[2] = tensorSizeARM(tensorARM, 2);                                                                    \
            shape[3] = tensorSizeARM(tensorARM, 3);                                                                    \
            shape[4] = tensorSizeARM(tensorARM, 4);                                                                    \
        } else if (shape.length() == 4) {                                                                              \
            shape[0] = tensorSizeARM(tensorARM, 0);                                                                    \
            shape[1] = tensorSizeARM(tensorARM, 1);                                                                    \
            shape[2] = tensorSizeARM(tensorARM, 2);                                                                    \
            shape[3] = tensorSizeARM(tensorARM, 3);                                                                    \
        } else if (shape.length() == 3) {                                                                              \
            shape[0] = tensorSizeARM(tensorARM, 0);                                                                    \
            shape[1] = tensorSizeARM(tensorARM, 1);                                                                    \
            shape[2] = tensorSizeARM(tensorARM, 2);                                                                    \
        } else if (shape.length() == 2) {                                                                              \
            shape[0] = tensorSizeARM(tensorARM, 0);                                                                    \
            shape[1] = tensorSizeARM(tensorARM, 1);                                                                    \
        } else if (shape.length() == 1) {                                                                              \
            shape[0] = tensorSizeARM(tensorARM, 0);                                                                    \
        }                                                                                                              \
    }

#define getIndex(tensorARM, index)                                                                                     \
    {                                                                                                                  \
        const uint offset =                                                                                            \
            gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;               \
                                                                                                                       \
        uint[index.length()] shape;                                                                                    \
        getShape(shape, tensorARM);                                                                                    \
                                                                                                                       \
        offsetToIndex(shape, offset, index);                                                                           \
    }

#define getIndex2(tensorARM, index)                                                                                    \
    {                                                                                                                  \
        const uint offset =                                                                                            \
            gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;               \
                                                                                                                       \
        uint[index.length()] shape;                                                                                    \
        shape[0] = tensorSizeARM(tensorARM, 0);                                                                        \
        shape[1] = tensorSizeARM(tensorARM, 1);                                                                        \
                                                                                                                       \
        offsetToIndex(shape, offset, index);                                                                           \
    }

#define getIndex3(tensorARM, index)                                                                                    \
    {                                                                                                                  \
        const uint offset =                                                                                            \
            gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;               \
                                                                                                                       \
        uint[index.length()] shape;                                                                                    \
        shape[0] = tensorSizeARM(tensorARM, 0);                                                                        \
        shape[1] = tensorSizeARM(tensorARM, 1);                                                                        \
        shape[2] = tensorSizeARM(tensorARM, 2);                                                                        \
                                                                                                                       \
        offsetToIndex(shape, offset, index);                                                                           \
    }

#define getIndex4(tensorARM, index)                                                                                    \
    {                                                                                                                  \
        const uint offset =                                                                                            \
            gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;               \
                                                                                                                       \
        uint[index.length()] shape;                                                                                    \
        shape[0] = tensorSizeARM(tensorARM, 0);                                                                        \
        shape[1] = tensorSizeARM(tensorARM, 1);                                                                        \
        shape[2] = tensorSizeARM(tensorARM, 2);                                                                        \
        shape[3] = tensorSizeARM(tensorARM, 3);                                                                        \
                                                                                                                       \
        offsetToIndex(shape, offset, index);                                                                           \
    }

#define getIndex5(tensorARM, index)                                                                                    \
    {                                                                                                                  \
        const uint offset =                                                                                            \
            gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;               \
                                                                                                                       \
        uint[index.length()] shape;                                                                                    \
        shape[0] = tensorSizeARM(tensorARM, 0);                                                                        \
        shape[1] = tensorSizeARM(tensorARM, 1);                                                                        \
        shape[2] = tensorSizeARM(tensorARM, 2);                                                                        \
        shape[3] = tensorSizeARM(tensorARM, 3);                                                                        \
        shape[4] = tensorSizeARM(tensorARM, 4);                                                                        \
                                                                                                                       \
        offsetToIndex(shape, offset, index);                                                                           \
    }
/*
 * SPDX-FileCopyrightText: Copyright 2024 Arm Limited and/or its affiliates <open-source-office@arm.com>
 * SPDX-License-Identifier: Apache-2.0
 */

layout(local_size_x = %warpX%) in;

layout(push_constant) uniform PushConstants {
    float signValue;
} pushConstants;

layout(set = 0, binding = 0) uniform tensorARM<float, 3> outputRealData;
layout(set = 1, binding = 0) uniform tensorARM<float, 3> outputImagData;
layout(set = 2, binding = 0) uniform tensorARM<float, 3> inputRealData;
layout(set = 3, binding = 0) uniform tensorARM<float, 3> inputImagData;

void main() {
    uint[3] index;
    getIndex3(outputRealData, index);

    const uint[3] shape = {
        tensorSizeARM(outputRealData, 0),
        tensorSizeARM(outputRealData, 1),
        tensorSizeARM(outputRealData, 2),
    };

    uint on = index[0];
    uint oy = index[1];
    uint ox = index[2];

    double sumReal = 0.0;
    double sumImag = 0.0;

    for (uint iy = 0; iy < shape[1]; iy++) {
        for (uint ix = 0; ix < shape[2]; ix += 4) {
            vec4 ixs = vec4(ix, ix + 1, ix + 2, ix + 3);
            float valueReal[4];
            tensorReadARM(inputRealData, uint[](on, iy, ix), valueReal);
            vec4 valueRealVec = vec4(valueReal[0], valueReal[1], valueReal[2], valueReal[3]);

            float valueImag[4];
            tensorReadARM(inputImagData, uint[](on, iy, ix), valueImag);
            vec4 valueImagVec = vec4(valueImag[0], valueImag[1], valueImag[2], valueImag[3]);

            vec4 angles = pushConstants.signValue * 2.0f * PI * (float(iy * oy) / shape[1] + ixs * ox / shape[2]);
            sumReal += dot(valueRealVec, cos(angles)) + dot(valueImagVec, sin(angles));
            sumImag += -dot(valueRealVec, sin(angles)) + dot(valueImagVec, cos(angles));
        }
    }

    tensorWriteARM(outputRealData, index, float(sumReal));
    tensorWriteARM(outputImagData, index, float(sumImag));
}
