/* Autogenerated by mlir-tblgen; don't manually edit */

#ifdef GEN_PASS_DECL
// Generate declarations for all passes.
#define GEN_PASS_DECL_TOSASERIALIZATIONJSONPASS
#define GEN_PASS_DECL_TOSASERIALIZATIONPASS
#undef GEN_PASS_DECL
#endif // GEN_PASS_DECL

//===----------------------------------------------------------------------===//
// TosaSerializationJSONPass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TOSASERIALIZATIONJSONPASS
#undef GEN_PASS_DECL_TOSASERIALIZATIONJSONPASS
#endif // GEN_PASS_DECL_TOSASERIALIZATIONJSONPASS
#ifdef GEN_PASS_DEF_TOSASERIALIZATIONJSONPASS
namespace impl {

template <typename DerivedT>
class TosaSerializationJSONPassBase : public ::mlir::OperationPass<func::FuncOp> {
public:
  using Base = TosaSerializationJSONPassBase;

  TosaSerializationJSONPassBase() : ::mlir::OperationPass<func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  TosaSerializationJSONPassBase(const TosaSerializationJSONPassBase &other) : ::mlir::OperationPass<func::FuncOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("tosa-serialize-json");
  }
  ::llvm::StringRef getArgument() const override { return "tosa-serialize-json"; }

  ::llvm::StringRef getDescription() const override { return "Generate TOSA flatbuffer JSON form"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TosaSerializationJSONPass");
  }
  ::llvm::StringRef getName() const override { return "TosaSerializationJSONPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TosaSerializationJSONPassBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TOSASERIALIZATIONJSONPASS
#endif // GEN_PASS_DEF_TOSASERIALIZATIONJSONPASS

//===----------------------------------------------------------------------===//
// TosaSerializationPass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TOSASERIALIZATIONPASS
#undef GEN_PASS_DECL_TOSASERIALIZATIONPASS
#endif // GEN_PASS_DECL_TOSASERIALIZATIONPASS
#ifdef GEN_PASS_DEF_TOSASERIALIZATIONPASS
namespace impl {

template <typename DerivedT>
class TosaSerializationPassBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TosaSerializationPassBase;

  TosaSerializationPassBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TosaSerializationPassBase(const TosaSerializationPassBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("tosa-serialize");
  }
  ::llvm::StringRef getArgument() const override { return "tosa-serialize"; }

  ::llvm::StringRef getDescription() const override { return "Generate TOSA flatbuffer serialized form"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TosaSerializationPass");
  }
  ::llvm::StringRef getName() const override { return "TosaSerializationPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TosaSerializationPassBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TOSASERIALIZATIONPASS
#endif // GEN_PASS_DEF_TOSASERIALIZATIONPASS
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// TosaSerializationJSONPass Registration
//===----------------------------------------------------------------------===//

inline void registerTosaSerializationJSONPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTosaSerializeJSONPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTosaSerializationJSONPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTosaSerializeJSONPass();
  });
}

//===----------------------------------------------------------------------===//
// TosaSerializationPass Registration
//===----------------------------------------------------------------------===//

inline void registerTosaSerializationPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTosaSerializePass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTosaSerializationPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTosaSerializePass();
  });
}

//===----------------------------------------------------------------------===//
// TosaSerialization Registration
//===----------------------------------------------------------------------===//

inline void registerTosaSerializationPasses() {
  registerTosaSerializationJSONPass();
  registerTosaSerializationPass();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class TosaSerializationJSONPassBase : public ::mlir::OperationPass<func::FuncOp> {
public:
  using Base = TosaSerializationJSONPassBase;

  TosaSerializationJSONPassBase() : ::mlir::OperationPass<func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  TosaSerializationJSONPassBase(const TosaSerializationJSONPassBase &other) : ::mlir::OperationPass<func::FuncOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("tosa-serialize-json");
  }
  ::llvm::StringRef getArgument() const override { return "tosa-serialize-json"; }

  ::llvm::StringRef getDescription() const override { return "Generate TOSA flatbuffer JSON form"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TosaSerializationJSONPass");
  }
  ::llvm::StringRef getName() const override { return "TosaSerializationJSONPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TosaSerializationJSONPassBase<DerivedT>)

protected:
};

template <typename DerivedT>
class TosaSerializationPassBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TosaSerializationPassBase;

  TosaSerializationPassBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TosaSerializationPassBase(const TosaSerializationPassBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("tosa-serialize");
  }
  ::llvm::StringRef getArgument() const override { return "tosa-serialize"; }

  ::llvm::StringRef getDescription() const override { return "Generate TOSA flatbuffer serialized form"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TosaSerializationPass");
  }
  ::llvm::StringRef getName() const override { return "TosaSerializationPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TosaSerializationPassBase<DerivedT>)

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
