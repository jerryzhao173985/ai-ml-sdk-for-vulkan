/* Autogenerated by mlir-tblgen; don't manually edit */

#ifdef GEN_PASS_DECL
// Generate declarations for all passes.
#define GEN_PASS_DECL_TOSADESERIALIZATIONJSONPASS
#define GEN_PASS_DECL_TOSADESERIALIZATIONPASS
#undef GEN_PASS_DECL
#endif // GEN_PASS_DECL

//===----------------------------------------------------------------------===//
// TosaDeserializationJSONPass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TOSADESERIALIZATIONJSONPASS
#undef GEN_PASS_DECL_TOSADESERIALIZATIONJSONPASS
#endif // GEN_PASS_DECL_TOSADESERIALIZATIONJSONPASS
#ifdef GEN_PASS_DEF_TOSADESERIALIZATIONJSONPASS
namespace impl {

template <typename DerivedT>
class TosaDeserializationJSONPassBase : public ::mlir::OperationPass<func::FuncOp> {
public:
  using Base = TosaDeserializationJSONPassBase;

  TosaDeserializationJSONPassBase() : ::mlir::OperationPass<func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  TosaDeserializationJSONPassBase(const TosaDeserializationJSONPassBase &other) : ::mlir::OperationPass<func::FuncOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("tosa-deserialize-json");
  }
  ::llvm::StringRef getArgument() const override { return "tosa-deserialize-json"; }

  ::llvm::StringRef getDescription() const override { return "Deserialize TOSA flatbuffer JSON form. Clear original MLIR graph and generate TOSA MLIR"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TosaDeserializationJSONPass");
  }
  ::llvm::StringRef getName() const override { return "TosaDeserializationJSONPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TosaDeserializationJSONPassBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TOSADESERIALIZATIONJSONPASS
#endif // GEN_PASS_DEF_TOSADESERIALIZATIONJSONPASS

//===----------------------------------------------------------------------===//
// TosaDeserializationPass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TOSADESERIALIZATIONPASS
#undef GEN_PASS_DECL_TOSADESERIALIZATIONPASS
#endif // GEN_PASS_DECL_TOSADESERIALIZATIONPASS
#ifdef GEN_PASS_DEF_TOSADESERIALIZATIONPASS
namespace impl {

template <typename DerivedT>
class TosaDeserializationPassBase : public ::mlir::OperationPass<func::FuncOp> {
public:
  using Base = TosaDeserializationPassBase;

  TosaDeserializationPassBase() : ::mlir::OperationPass<func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  TosaDeserializationPassBase(const TosaDeserializationPassBase &other) : ::mlir::OperationPass<func::FuncOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("tosa-deserialize");
  }
  ::llvm::StringRef getArgument() const override { return "tosa-deserialize"; }

  ::llvm::StringRef getDescription() const override { return "Deserialize TOSA flatbuffer. Clear original MLIR graph and generate TOSA MLIR"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TosaDeserializationPass");
  }
  ::llvm::StringRef getName() const override { return "TosaDeserializationPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TosaDeserializationPassBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TOSADESERIALIZATIONPASS
#endif // GEN_PASS_DEF_TOSADESERIALIZATIONPASS
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// TosaDeserializationJSONPass Registration
//===----------------------------------------------------------------------===//

inline void registerTosaDeserializationJSONPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTosaDeserializeJSONPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTosaDeserializationJSONPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTosaDeserializeJSONPass();
  });
}

//===----------------------------------------------------------------------===//
// TosaDeserializationPass Registration
//===----------------------------------------------------------------------===//

inline void registerTosaDeserializationPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTosaDeserializePass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTosaDeserializationPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTosaDeserializePass();
  });
}

//===----------------------------------------------------------------------===//
// TosaDeserialization Registration
//===----------------------------------------------------------------------===//

inline void registerTosaDeserializationPasses() {
  registerTosaDeserializationJSONPass();
  registerTosaDeserializationPass();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class TosaDeserializationJSONPassBase : public ::mlir::OperationPass<func::FuncOp> {
public:
  using Base = TosaDeserializationJSONPassBase;

  TosaDeserializationJSONPassBase() : ::mlir::OperationPass<func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  TosaDeserializationJSONPassBase(const TosaDeserializationJSONPassBase &other) : ::mlir::OperationPass<func::FuncOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("tosa-deserialize-json");
  }
  ::llvm::StringRef getArgument() const override { return "tosa-deserialize-json"; }

  ::llvm::StringRef getDescription() const override { return "Deserialize TOSA flatbuffer JSON form. Clear original MLIR graph and generate TOSA MLIR"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TosaDeserializationJSONPass");
  }
  ::llvm::StringRef getName() const override { return "TosaDeserializationJSONPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TosaDeserializationJSONPassBase<DerivedT>)

protected:
};

template <typename DerivedT>
class TosaDeserializationPassBase : public ::mlir::OperationPass<func::FuncOp> {
public:
  using Base = TosaDeserializationPassBase;

  TosaDeserializationPassBase() : ::mlir::OperationPass<func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  TosaDeserializationPassBase(const TosaDeserializationPassBase &other) : ::mlir::OperationPass<func::FuncOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("tosa-deserialize");
  }
  ::llvm::StringRef getArgument() const override { return "tosa-deserialize"; }

  ::llvm::StringRef getDescription() const override { return "Deserialize TOSA flatbuffer. Clear original MLIR graph and generate TOSA MLIR"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TosaDeserializationPass");
  }
  ::llvm::StringRef getName() const override { return "TosaDeserializationPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TosaDeserializationPassBase<DerivedT>)

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
