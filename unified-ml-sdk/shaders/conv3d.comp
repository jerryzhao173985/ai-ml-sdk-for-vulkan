/*
 * SPDX-FileCopyrightText: Copyright 2023-2025 Arm Limited and/or its affiliates <open-source-office@arm.com>
 * SPDX-License-Identifier: Apache-2.0
 */

#define IN_T %in_t%
#define OUT_T %out_t%
#define WEIGHT_T %weight_t%
#define TYPE_ACC %acc_t_type%
#define ACC_T %acc_t%

#if TYPE_ACC == TYPE_INT64
    #define VEC4 dvec4
#elif TYPE_ACC == TYPE_INT32
    #define VEC4 ivec4
#else
    #define VEC4 vec4
#endif

layout(local_size_x = %warpX%) in;

layout(push_constant) uniform PushConstants {
    int32_t inputZeroPoint;
    int32_t weightZeroPoint;
    int32_t pad[6];             // [d0, d1, top, bottom, left, right]
    int32_t stride[3];          // [d, y, x]
    int32_t dilation[3];        // [d, y, x]
} pushConstants;

layout(set = 0, binding = 0) uniform tensorARM<OUT_T, 5> outputData;       // [N, OD, OH, OW, OC]
layout(set = 1, binding = 0) uniform tensorARM<IN_T, 5> inputData;         // [N, ID, IH, IW, IC]
layout(set = 2, binding = 0) uniform tensorARM<WEIGHT_T, 5> weightsData;   // [OC, KD, KH, KW, IC]
layout(set = 3, binding = 0) uniform tensorARM<OUT_T, 1> biasesData;       // [BC]

void main() {
    uint[5] index;
    getIndex5(outputData, index);

    ACC_T acc = ACC_T(0);

    uint n = index[0];
    uint od = index[1];
    uint oy = index[2];
    uint ox = index[3];
    uint oc = index[4];

    uint id = od * pushConstants.stride[0] - pushConstants.pad[0];
    uint iy = oy * pushConstants.stride[1] - pushConstants.pad[2];
    uint ix = ox * pushConstants.stride[2] - pushConstants.pad[4];

    uint KD = tensorSizeARM(weightsData, 1);
    uint KH = tensorSizeARM(weightsData, 2);
    uint KW = tensorSizeARM(weightsData, 3);
    uint IC = tensorSizeARM(weightsData, 4);

    uint ID = tensorSizeARM(inputData, 1);
    uint IH = tensorSizeARM(inputData, 2);
    uint IW = tensorSizeARM(inputData, 3);

    for (uint kd = 0; kd < KD; kd++) {
        for (uint ky = 0; ky < KH; ky++) {
            for (uint kx = 0; kx < KW; kx++) {
                uint d = id + kd * pushConstants.dilation[0];
                uint y = iy + ky * pushConstants.dilation[1];
                uint x = ix + kx * pushConstants.dilation[2];

                if (d < ID && y < IH && x < IW) {
                    for (uint ic = 0; ic < IC; ic += 4) {
                        IN_T tempValue[4];
                        tensorReadARM(inputData, uint[](n, d, y, x, ic), tempValue);
                        VEC4 value = VEC4(tempValue[0], tempValue[1], tempValue[2], tempValue[3]);

                        WEIGHT_T tempWeight[4];
                        tensorReadARM(weightsData, uint[](oc, kd, ky, kx, ic), tempWeight);
                        VEC4 weight = VEC4(tempWeight[0], tempWeight[1], tempWeight[2], tempWeight[3]);

                        VEC4 outValue = VEC4(value[0], value[1], value[2], value[3]) - pushConstants.inputZeroPoint;
                        VEC4 outWeight = VEC4(weight[0], weight[1], weight[2], weight[3]) - pushConstants.weightZeroPoint;
                        VEC4 mul = outValue * outWeight;

                        for (uint idx = 0; idx < 4 && ic + idx < IC; ++idx) {
                            acc += ACC_T(mul[idx]);
                        }
                    }
                }
            }
        }
    }

    OUT_T bias;
    tensorReadARM(biasesData, uint[](tensorSizeARM(biasesData, 0) == 1 ? 0 : oc), bias);
    bias += OUT_T(acc);

    tensorWriteARM(outputData, index, bias);
}
