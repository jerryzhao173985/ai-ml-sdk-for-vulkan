
#version 450
layout(local_size_x = 64) in;
layout(set = 0, binding = 0) readonly buffer Input { float data[]; } input;
layout(set = 0, binding = 1) readonly buffer Kernel { float data[]; } kernel;
layout(set = 0, binding = 2) writeonly buffer Output { float data[]; } output;
layout(push_constant) uniform PushConstants {
    uint input_size;
    uint kernel_size;
} pc;
void main() {
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= pc.input_size - pc.kernel_size + 1) return;
    
    float sum = 0.0;
    for (uint k = 0; k < pc.kernel_size; k++) {
        sum += input.data[idx + k] * kernel.data[k];
    }
    output.data[idx] = sum;
}
