/*
 * SPDX-FileCopyrightText: Copyright 2023-2025 Arm Limited and/or its affiliates <open-source-office@arm.com>
 * SPDX-License-Identifier: Apache-2.0
 */

#define IN_OUT_T %in_out_t%
#define TYPE_IN_OUT %in_out_t_type%

layout(local_size_x = %warpX%) in;

layout(push_constant) uniform PushConstants {
    double min;
    double max;
    uint nanMode;
} pushConstants;

layout(constant_id = 0) const uint32_t RANK = RANK_MAX;

layout(set = 0, binding = 0) uniform tensorARM<IN_OUT_T, RANK> outputData;
layout(set = 1, binding = 0) uniform tensorARM<IN_OUT_T, RANK> inputData;

void main() {
    uint[RANK] index;
    getIndex(outputData, index);

    IN_OUT_T value;
    tensorReadARM(inputData, index, value);

#if IS_FLOAT(TYPE_IN_OUT)
    // In the NaN ignoring mode, if the input is a NaN, the output is the specified minimum value.
    if (isnan(value) && (pushConstants.nanMode == NAN_MODE_IGNORE)) {
        value = IN_OUT_T(pushConstants.min);
    }
#endif

    // In the NaN propagating mode, if the input is a NaN, the output must be a NaN.
    value = isnan(float(value)) ? value : clamp(value, IN_OUT_T(pushConstants.min), IN_OUT_T(pushConstants.max));
    tensorWriteARM(outputData, index, value);
}
